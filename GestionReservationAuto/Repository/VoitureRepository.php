<?php

namespace DTC\Modules\GestionReservationAuto\Repository;

use DTC\Common\Kernel\Extensions\Doctrine\SqlSrv\ORM\CustomEntityRepository;

/**
 * VoitureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoitureRepository extends CustomEntityRepository
{

    public function SelectByServiceAndStatut($service, $statut)
    {
        $qb = $this->createQueryBuilder('o')
                ->where('o.service = :service')
                ->andWhere('o.statut = :statut');

        $qb->setParameter('service', $service)
                ->setParameter('statut', $statut);

        return $qb;
    }

    public function findNotInReserv(
    \DTC\Modules\GestionReservationAuto\Entity\Reservation $reservation, \DTC\Modules\GestionReservationAuto\Entity\User $user = null)
    {

        if (_empty($reservation->getDateDebut()) || _empty($reservation->getDateFin())) {
            return array();
        }

        $qb = $this->createQueryBuilder('v')
                ->join('v.reservations', 'r');

        $qb->where(
                        $qb->expr()->orX(
                                $qb->expr()->between('r.dateDebut', ':dateDebut', ':dateFin'), $qb->expr()->between('r.dateFin', ':dateDebut', ':dateFin'), $qb->expr()->andX($qb->expr()->lte('r.dateDebut', ':dateDebut'), $qb->expr()->gte('r.dateFin', ':dateFin')
                                ), $qb->expr()->eq('r.dateDebut', ':dateDebut'), $qb->expr()->eq('r.dateDebut', ':dateFin'), $qb->expr()->eq('r.dateFin', ':dateFin'), $qb->expr()->eq('r.dateFin', ':dateDebut')
                        )
                )
                ->setParameter('dateDebut', $reservation->getDateDebut())
                ->setParameter('dateFin', $reservation->getDateFin());

        $notin = $qb->getQuery()->getResult();

        // Requete mÃ¨re
        $qb = $this->getQBByUserPerimetre($user);

        if (!empty($notin)) {
            $qb = $qb->andWhere(
                    $qb->expr()->notIn('voiture.idVoiture', array_map(function($v) {
                                return $v->getIdVoiture();
                            }, $notin))
            );
        }

        return $qb->getQuery()->getResult();
    }

    public function findVehicules()
    {
        return $this->getEntityManager()
                        ->getRepository('\DTC\Modules\GestionReservationAuto\Entity\Vehicule\Vehicule')
                        ->createQueryBuilder('veh')
                        ->innerJoin('veh.voiture', 'voi')
                        ->getQuery()
                        ->getResult();
    }

    public function findByService($regate)
    {
        return $this->getEntityManager()
                        ->getRepository('\DTC\Modules\GestionReservationAuto\Entity\Voiture')
                        ->createQueryBuilder('r')
                        ->select('r')
                        ->join('\DTC\Modules\GestionReservationAuto\Entity\Vehicule\Vehicule', 'v', 'WITH', 'r.vehicule = v')
                        ->join('v.locSourceOrga', 'so')
                        ->where('so.regCode = :regate')
                        ->setParameter('regate', $regate)
                        ->getQuery()
                        ->getResult();
    }

    public function getQBByUserPerimetre(\DTC\Modules\GestionReservationAuto\Entity\User $user)
    {
        $qb = $this->createQueryBuilder('voiture');

        return $qb->join('voiture.vehicule', 'vehicule')
                        ->join('vehicule.locSourceOrga', 'so')
                        ->join('so.perimetres', 'perimetre', 'WITH', 'perimetre = :perimetre')
                        ->setParameter('perimetre', $user->getPerimetre())
                        ->where(
                                $qb->expr()->orX(
                                        $qb->expr()->eq('voiture.statut', ':statut'), $qb->expr()->eq('voiture.idVoiture', ':idVoiture')
                                )
                        )
                        ->setParameter('statut', 'disponible')
                        ->setParameter('idVoiture', ((!is_null($user->getVoitureAttribue())) ? $user->getVoitureAttribue()->getIdVoiture() : null))
                        ->orderBy('vehicule.vehImmat', 'ASC');
    }

}
