<?php

namespace DTC\Modules\GestionReservationAuto\Repository;

use DTC\Common\Kernel\Extensions\Doctrine\SqlSrv\ORM\CustomEntityRepository;

/**
 * VoitureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends CustomEntityRepository
{

    public function findNotInReserv(
    \DTC\Modules\GestionReservationAuto\Entity\Reservation $reservation, \DTC\Modules\GestionReservationAuto\Entity\User $user = null
    )
    {
        if (_empty($reservation->getDateDebut()) || _empty($reservation->getDateFin())) {
            return array();
        }
        $qb = $this->createQueryBuilder('u')
                ->join('u.reservations', 'r');

        $qb->where(
                        $qb->expr()->orX(
                                $qb->expr()->between('r.dateDebut', ':dateDebut', ':dateFin'), $qb->expr()->between('r.dateFin', ':dateDebut', ':dateFin'), $qb->expr()->andX(
                                        $qb->expr()->lte('r.dateDebut', ':dateDebut'), $qb->expr()->gte('r.dateFin', ':dateFin')
                                ), $qb->expr()->eq('r.dateDebut', ':dateDebut'), $qb->expr()->eq('r.dateDebut', ':dateFin'), $qb->expr()->eq('r.dateFin', ':dateFin')
                        )
                )
                ->setParameter('dateDebut', $reservation->getDateDebut())
                ->setParameter('dateFin', $reservation->getDateFin());
        $notin = $qb->getQuery()->getResult();

        $qb = $this->getQBUserService($user->getSourceAgent()->getSourceOrgaAffectectation());

        if (!empty($notin)) {
            $qb = $qb->andWhere(
                    $qb->expr()->notIn('user.idUser', array_map(function($u) {
                                return $u->getIdUser();
                            }, $notin))
            );
        }
        return $qb->getQuery()->getResult();
    }

    public function findGestionnaireService($service)
    {
        $qb = $this->getEntityManager()
                ->getRepository('\DTC\Modules\GestionReservationAuto\Entity\User')
                ->createQueryBuilder('u')
                ->select('u.mail')
                ->where('u.service = :service')
                ->andWhere('u.grade = :gestionnaire')
                ->setParameter('service', $service)
                ->setParameter('gestionnaire', 'gestionnaire')
                ->getQuery()
                ->getResult();
        return $qb;
    }

    public function findByService($so)
    {
        return $this->getEntityManager()
                        ->getRepository('\DTC\Modules\GestionReservationAuto\Entity\User')
                        ->createQueryBuilder('u')
                        ->select('u')
                        ->join('\DTC\Modules\GestionReservationAuto\Entity\GestionRh\SourceAgent', 'sa', 'WITH', 'u.sourceAgent = sa')
                        ->where('sa.sourceOrgaAffectectation = :so')
                        ->setParameter('so', $so)
                        ->getQuery()
                        ->getResult();
    }

    public function findByManyPerimetre($pers)
    {
        $result = array();
        foreach ($pers as $per) {
            $qb = $this->createQueryBuilder('u')
                    ->select('u')
                    ->where('u.perimetre = :per')
                    ->setParameter('per', $per)
                    ->getQuery()
                    ->getResult();
            $result = array_merge($result, $qb);
        }
        return $result;
    }

    public function getQBUserService(\DTC\Modules\GestionReservationAuto\Entity\Organization\SourceOrga $so)
    {
        $qb = $this->createQueryBuilder('user');
        return $qb->join('user.sourceAgent', 'sa')
                        ->where('sa.sourceOrgaAffectectation = :so')
                        ->setParameter('so', $so);
    }

}
